# Single MPC Controller

In our simulation analysis we have 2 cars as traffic participants and in this folder we will focus on the situation where only one car is driven by MPC and another car is hardcode.

Here we will introduce the running environment, the communication method between matlab and pytorch, the running procudures and in the last the visualization method.

## Environment

System: win10
Matlab: R2020b
Python: 3.8
Pytorch: 1.11.0+cpu
and the packages which are used in the python files.

## Communication between Matlab and Pytorch

In this project we use pytorch to construct our neural network and use matlab to design our MPC controller, so we need to connect the communication between Matlab and Pytorh.

* Step 1. Install compatible python version

Please refer to the link https://www.mathworks.com/support/requirements/python-compatibility.html and install corresponding python3 version.

After installation please input *pyenv* in comman window to check the PythonEnvironment. If it shows the correct python version information, it means the installation is succssful.

* Step 2. Call the neural network model

First we need to copy the neural network model to the current matlab folder and then load the trained parameters.

The neural network model is storaged in *module.py*. Then we need to creat a new file using Python to call the prediction model. We named the file here *dlprediction.py*.

In the file *dlprediction.py* there are 2 inputs. The first input is *params_path* where we transfer the path of pretrained neural network hyperparameters to this function and the second input is data which is the past trajectory of target vehicle in our project.

* Step 3. Call Python

In this step we will use matlab to call python. It is needed we first creat a *.m* filed named *matpy.m*. There are also two inputs which are the same as *dlprediction.py*. Because the definition of format in matlab and python is different, you may also need to refer this page https://www.mathworks.com/help/matlab/matlab_external/passing-data-to-python.html to transfer the format of data to make sure the format can be read in different coding language.

In the file *predconstraint.m* we will call the function *matpy* and get the predicted trajectory of target vehicle.

## Simulation Procedure

* Step 1. Design the tracking reference for target vehicle

The main window file for this project is *main.m*. In this file we need to assign the reference line variable *ref_v1* a pre-defined reference points. Because in this project we only simulate 40 steps, the variable only need to save 40 steps information. As every state of target vehicle is represented by 4 parameters namely *x-position*, *y-position*, *phi-orientation* and *v-celocity*. Therefore, the size of this parameter is *40x40*. In this project we should first define the value of this variable.

* Step 2. Limit Points and Constraint Angels

In *predconstraint.m* we have implied the calculation method of limit points and constraint angels. Firstly, we need to read the current states of target vehicle and ego vehicle to calculate the corresponding 4 limit points and constraint angles. Then as we have mentioned in the thied step we need to use *matpy.m* function to call the neural network and input the past trajectory of target vehicle to get the predicted future trajectory of target vehicle. With the help of the trajectory prediction method we can get the end point of predicted trajectory *x_pred, y_pred* and calculate the corresponding angle *\alpha_pred*. We can compare the angle from current target vehicle and the predicted angle to get a maximum and minimum angle.

* Step 3. Relaxing Parameters

In file *linearconstraints.m* we can change the value of relaxing parameter. If we enlarge the value, the maneuver of ego vehicle would be more aggressive and vice verse.

After finishing the above three steps, we can just *main.m* to start our simulation.

## Result Visualization

In this project we offer many methods to visualize the simulation result.

* *plot_traject.m* will plot the intuitive simulation result.
* *plot_5states.m* will plot the comparision  of the vehicle states in the 40 steps.
